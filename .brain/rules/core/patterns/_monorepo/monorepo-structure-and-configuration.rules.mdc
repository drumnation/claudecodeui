---
description: 
globs: 
alwaysApply: true
---
# Monorepo Structure and Configuration (v3) ‚Äî pnpm + Turbo + ESM + @kit/testing

## ‚ö†Ô∏è CRITICAL STRUCTURAL UNDERSTANDING

This rule contains ESSENTIAL information about how the monorepo is structured.
It must be understood for ALL operations in the codebase.

IMPORTANT PRINCIPLES:
- Configuration is SHARED from central packages - DO NOT duplicate or override
- Package naming follows a strict pattern - DO NOT deviate
- Testing, linting, and building use shared tooling - DO NOT reinvent
- TypeScript configuration is ESM-first with optional dual CJS support

## üìÇ Folder Purposes

```txt
/apps      Executable apps that consume packages
/packages  Libraries exported to apps
/tooling   Shared tooling (eslint, prettier, testing, tsconfig, etc.)
```

üè∑ Naming Patterns

```txt
/apps      @[app-name]/*
/packages  @[app-name]/*
/tooling   @kit/*   ‚Üê reserved for shared tooling
```

## üõ† TypeScript Configuration

### Shared Base Configurations in `@kit/tsconfig`

We provide three base configurations:

1. **base.json** - Core TypeScript settings with strict type checking
2. **node.json** - Node.js specific settings (extends base.json)
3. **react.json** - React-specific settings (extends base.json)

```json
// In package.json of @kit/tsconfig
{
  "exports": {
    "./base": "./base.json",
    "./node": "./node.json",
    "./react": "./react.json",
    ".": "./base.json"
  }
}
```

### Per-Package Configuration

Each package should extend from the appropriate base configuration and add minimal overrides:

```json
// For Node.js packages
{
  "extends": "@kit/tsconfig/node",
  "compilerOptions": {
    "rootDir": "src",
    "outDir": "dist"
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.d.ts"],
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
}

// For React packages
{
  "extends": "@kit/tsconfig/react",
  "compilerOptions": {
    "rootDir": "src",
    "outDir": "dist"
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.d.ts"],
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
}
```

### ESM Configuration

For ESM packages with dual ESM/CJS output:

1. Create a base tsconfig.json for ESM output
2. Create a tsconfig.cjs.json for CommonJS output

```json
// tsconfig.cjs.json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "CommonJS",
    "moduleResolution": "Node",
    "outDir": "dist/cjs"
  }
}
```

## üì¶ Package Configuration

### ESM-First Approach

```json
{
  "name": "@[app-name]/[package-name]",
  "type": "module",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      },
      "require": {
        "types": "./dist/cjs/index.d.ts",
        "default": "./dist/cjs/index.js"
      }
    }
  },
  "main": "./dist/cjs/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts"
}
```

### Script Configuration

```json
{
  "scripts": {
    "clean": "rimraf dist node_modules/.cache",
    "format": "prettier --check \"**/*.{ts,tsx}\"",
    "lint": "eslint .",
    "typecheck": "tsc --noEmit",
    "build": "pnpm build:clean && pnpm build:esm && pnpm build:cjs",
    "build:clean": "rimraf dist",
    "build:esm": "tsc",
    "build:cjs": "tsc --project tsconfig.cjs.json",
    
    /* ---- TEST SCRIPTS ---- */
    "test":              "turbo run test --filter={packageName}",
    "test:unit":         "vitest run --config @kit/testing/unit",
    "test:integration":  "vitest run --config @kit/testing/integration",
    "test:e2e":          "vitest run --config @kit/testing/e2e",
    "test:e2e:browser":  "playwright test --config @kit/testing/playwright"
  }
}
```

### Important ESM Rules

1. In TypeScript files, always use the `.js` extension in import paths, even when importing TypeScript files:

```typescript
// Correct for ESM
import { something } from './utils/something.js';

// Incorrect for ESM
import { something } from './utils/something';
```

2. Always use bracket notation to access properties from `Record<string, unknown>` or environment variables:

```typescript
// Correct
const value = options['propertyName'];
if (process.env['NODE_ENV'] === 'development') { ... }

// Incorrect - will cause TypeScript errors
const value = options.propertyName;
if (process.env.NODE_ENV === 'development') { ... }
```

## üõ† Creating (or converting) a Library

1. If the library lives in ./apps/*

package.json

```json
{
  "name": "@[app-name]/[package-name]",
  "scripts": {
    "clean": "git clean -xdf .turbo node_modules",
    "format": "prettier --check \"**/*.{ts,tsx}\"",
    "lint": "eslint .",
    "typecheck": "tsc --noEmit",

    /* ---- TEST SCRIPTS ---- */
    "test":              "turbo run test --filter={packageName}",
    "test:unit":         "vitest run --config @kit/testing/unit",
    "test:integration":  "vitest run --config @kit/testing/integration",
    "test:e2e":          "vitest run --config @kit/testing/e2e",
    "test:e2e:browser":  "playwright test --config @kit/testing/playwright"
  },
  "devDependencies": {
    "@kit/tsconfig":        "workspace:*",
    "@kit/eslint-config":   "workspace:*",
    "@kit/prettier-config": "workspace:*",
    "@kit/testing":         "workspace:*"
  },
  "eslintConfig": {
    "root": true,
    "extends": [
      "@kit/eslint-config/base",
      "@kit/eslint-config/react",   // remove if not React
      "@kit/eslint-config/sort"
    ]
  },
  "prettier": "@kit/prettier-config"
}
```

Replace any unused test:* script with a no-op (echo 'n/a' && exit 0) if that scope doesn't apply.

2. If the library lives in ./packages/* (ESM with dual output)

```json
{
  "name": "@[app-name]/[package-name]",
  "type": "module",
  "exports": {
    ".": {
      "import": {
        "types": "./dist/index.d.ts",
        "default": "./dist/index.js"
      },
      "require": {
        "types": "./dist/cjs/index.d.ts",
        "default": "./dist/cjs/index.js"
      }
    }
  },
  "main": "./dist/cjs/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": ["dist"],
  "scripts": {
    "clean": "rimraf dist node_modules/.cache",
    "format": "prettier --check \"**/*.{ts,tsx}\"",
    "lint": "eslint .",
    "typecheck": "tsc --noEmit",
    "build": "pnpm build:clean && pnpm build:esm && pnpm build:cjs",
    "build:clean": "rimraf dist",
    "build:esm": "tsc",
    "build:cjs": "tsc --project tsconfig.cjs.json"
  }
}
```

ü™Ñ Shared tsconfig.json

```json
{
  "extends": "@kit/tsconfig/node", // or "@kit/tsconfig/react" for React packages
  "compilerOptions": {
    "tsBuildInfoFile": "node_modules/.cache/tsbuildinfo.json",
    "rootDir": "src",
    "outDir": "dist"
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.d.ts"],
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
}
```

üèó Root turbo.json

```json
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": { "outputs": ["dist/**"] },

    "test":             { "dependsOn": ["^build"], "outputs": [] },
    "test:unit":        { "outputs": [] },
    "test:integration": { "outputs": [] },
    "test:e2e":         { "outputs": [] },
    "test:e2e:browser": { "outputs": [] }
  }
}
```

üß™ @kit/testing Exports

| Export                              | Runner     | Purpose                        |
| ----- | ---- | --- |
| `@kit/testing/unit`                 | Vitest     | Unit tests                     |
| `@kit/testing/integration`          | Vitest     | Multi-module integration tests |
| `@kit/testing/e2e`                  | Vitest     | Backend / API E2E tests        |
| `@kit/testing/playwright`           | Playwright | Browser E2E flows              |
| `@kit/testing/playwright-backend`\* | Playwright | Optional non-UI E2E            |


* Only needed if you prefer Playwright for backend flows; Vitest e2e remains default.

üìò pnpm-workspace.yaml

```yaml
packages:
  - "apps/*"
  - "packages/*"
  - "tooling/*"
```

‚úÖ Quick Start

- pnpm install

- Add/convert libraries following the folder rules above.

- Run pnpm turbo run test at the repo root, or individual test:* scripts inside a package.

---

These shared configurations give you:

* **Clear TDD guidance** (agent-requested).  
* **Autonomous file-structure enforcement**.  
* **Universal functional-testing principles**.  
* **Turn-key monorepo setup** with Vitest + Playwright wired in.
* **ESM-first approach** with dual ESM/CJS support for compatibility.

## üö® Warning Signs - Stop and Reconsider if:

- You're about to create a duplicate configuration file that exists in a shared package
- You're planning to modify package.json without maintaining workspace dependencies
- You're creating a new package without following the monorepo structure
- You're introducing a new testing or linting approach without using shared configs
- You're using dot notation with dynamic objects or environment variables 